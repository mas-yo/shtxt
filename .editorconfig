root = false

[*.cs]
# Indentation and spacing
indent_size = 4
indent_style = space
tab_width = 4

# New line preferences
end_of_line = lf
insert_final_newline = false

charset = utf-8

# top-most EditorConfig file
root = false

# Visual Studio coding convention settings
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference

# Language conventions
# options_name = true | false : none | silent | suggestion | warning | error

# .NET code style settings
[*.{cs,vb}]

# "This." and "Me." qualifiers
dotnet_style_qualification_for_field    = false : suggestion
dotnet_style_qualification_for_property = false : suggestion
dotnet_style_qualification_for_method   = false : suggestion
dotnet_style_qualification_for_event    = false : suggestion

# Language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true : suggestion
dotnet_style_predefined_type_for_member_access             = true : suggestion

# Modifier preferences
# dotnet_style_require_accessibility_modifiers = always | for_non_interface_members | never
dotnet_style_require_accessibility_modifiers = always : suggestion
dotnet_style_readonly_field                  = true : suggestion

# Parentheses preferences
# dotnet_style_parentheses_in = always_for_clarity | never_if_unnecessary
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity : suggestion
dotnet_style_parentheses_in_other_binary_operators      = always_for_clarity : suggestion
dotnet_style_parentheses_in_other_operators             = never_if_unnecessary : suggestion
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity : suggestion

# Expression-level preferences
dotnet_style_object_initializer                            = true : suggestion
dotnet_style_collection_initializer                        = true : suggestion
dotnet_style_explicit_tuple_names                          = true : suggestion
dotnet_style_prefer_inferred_tuple_names                   = true : suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names   = true : suggestion
dotnet_style_prefer_auto_properties                        = true : suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true : silent
dotnet_style_prefer_conditional_expression_over_return     = true : silent
dotnet_style_prefer_compound_assignment                    = true : suggestion

dotnet_style_operator_placement_when_wrapping      = beginning_of_line : suggestion
dotnet_style_prefer_simplified_boolean_expressions = true : suggestion
dotnet_style_prefer_simplified_interpolation       = true : suggestion

# "Null" checking preferences
dotnet_style_coalesce_expression                                 = true : suggestion
dotnet_style_null_propagation                                    = true : suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true : suggestion

# .NET code quality settings
[*.{cs,vb}]
# dotnet_code_quality_unused_parameters = all | non_public
dotnet_code_quality_unused_parameters = all : suggestion

# C# code style settings
[*.cs]

# Implicit and explicit types
csharp_style_var_for_built_in_types    = true : suggestion
csharp_style_var_when_type_is_apparent = true : suggestion
csharp_style_var_elsewhere             = true : suggestion

# Expression-bodied members
# options_name = true | false | when_on_single_line
csharp_style_expression_bodied_methods         = when_on_single_line : silent
csharp_style_expression_bodied_constructors    = false : suggestion
csharp_style_expression_bodied_operators       = when_on_single_line : silent
csharp_style_expression_bodied_properties      = true : suggestion
csharp_style_expression_bodied_indexers        = true : silent
csharp_style_expression_bodied_accessors       = true : suggestion
csharp_style_expression_bodied_lambdas         = true : silent
csharp_style_expression_bodied_local_functions = false : silent

# Pattern matching
csharp_style_pattern_matching_over_is_with_cast_check = true : suggestion
csharp_style_pattern_matching_over_as_with_null_check = true : suggestion

# Inlined variable declarations
csharp_style_inlined_variable_declaration = true : suggestion

# Expression-level preferences
csharp_prefer_simple_default_expression = true : suggestion

# "Null" checking preferences
csharp_style_throw_expression          = true : suggestion
csharp_style_conditional_delegate_call = true : suggestion

# Modifier preferences
# csharp_preferred_modifier_order = public, private, protected, internal, static, extern, new, virtual, abstract, sealed, override, readonly, unsafe, volatile, async
csharp_preferred_modifier_order = public, protected, internal, private, new, abstract, virtual, override, sealed, static, readonly, extern, unsafe, volatile, async : suggestion

# Code block preferences
# csharp_prefer_braces = true | false | when_multiline
csharp_prefer_braces = true : suggestion

# Unused value preferences
# options_name = discard_variable | unused_local_variable
csharp_style_unused_value_expression_statement_preference = discard_variable : silent
csharp_style_unused_value_assignment_preference           = discard_variable : suggestion

# Index and range preferences
csharp_style_prefer_index_operator = true : suggestion
csharp_style_prefer_range_operator = true : suggestion

# Miscellaneous preferences
csharp_style_deconstructed_variable_declaration    = true : suggestion
csharp_style_pattern_local_over_anonymous_function = true : suggestion
# csharp_using_directive_placement = outside_namespace | inside_namespace
csharp_using_directive_placement                   = outside_namespace : silent
csharp_prefer_static_local_function                = true : suggestion
csharp_prefer_simple_using_statement               = true : suggestion
csharp_style_prefer_switch_expression              = true : suggestion

# Formatting conventions
# rule_name = true | false

# .NET formatting settings
[*.{cs,vb}]

# Organize usings
dotnet_sort_system_directives_first     = true
dotnet_separate_import_directive_groups = true

file_header_template = unset

# C# formatting settings
[*.cs]

# Newline options
# csharp_new_line_before_open_brace = all | none | accessors, anonymous_methods, anonymous_types, control_blocks, events, indexers, lambdas, local_functions, methods, object_collection_array_initializers, properties, types
csharp_new_line_before_open_brace                     = all
csharp_new_line_before_else                           = true
csharp_new_line_before_catch                          = true
csharp_new_line_before_finally                        = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types     = true
csharp_new_line_between_query_expression_clauses      = true

# Indentation options
csharp_indent_case_contents            = true
csharp_indent_switch_labels            = true
# csharp_indent_labels = flush_left | one_less_than_current | no_change
csharp_indent_labels                   = flush_left
csharp_indent_block_contents           = true
csharp_indent_braces                   = false
csharp_indent_case_contents_when_block = false

# Spacing options
csharp_space_after_cast                                                  = false
csharp_space_after_keywords_in_control_flow_statements                   = true
# csharp_space_between_parentheses = false | control_flow_statements, expressions, type_casts
csharp_space_between_parentheses                                         = false
csharp_space_before_colon_in_inheritance_clause                          = true
csharp_space_after_colon_in_inheritance_clause                           = true
# csharp_space_around_binary_operators = before_and_after | none | ignore
csharp_space_around_binary_operators                                     = before_and_after
csharp_space_between_method_declaration_parameter_list_parentheses       = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis        = false
csharp_space_between_method_call_parameter_list_parentheses              = false
csharp_space_between_method_call_empty_parameter_list_parentheses        = false
csharp_space_between_method_call_name_and_opening_parenthesis            = false
csharp_space_after_comma                                                 = true
csharp_space_before_comma                                                = false
csharp_space_after_dot                                                   = false
csharp_space_before_dot                                                  = false
csharp_space_after_semicolon_in_for_statement                            = true
csharp_space_before_semicolon_in_for_statement                           = false
csharp_space_around_declaration_statements                               = false
csharp_space_before_open_square_brackets                                 = false
csharp_space_between_empty_square_brackets                               = false
csharp_space_between_square_brackets                                     = false

# Wrapping options
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks     = true

# Using directive options
# csharp_using_directive_placement

# .NET naming conventions
[*.{cs,vb}]

# Symbols
# dotnet_naming_rule.<namingRuleTitle>.symbols = <symbolTitle>
# dotnet_naming_symbols.<symbolTitle>.applicable_kinds = * | namespace, class, struct, interface, enum, property, method, field, event, delegate, parameter, type_parameter, local, local_function
# dotnet_naming_symbols.<symbolTitle>.applicable_accessibilities = * | public, internal, private, protected, protected_internal, local
# dotnet_naming_symbols.<symbolTitle>.required_modifiers = abstract, async, const, readonly, static
# dotnet_naming_rule.<namingRuleTitle>.style = <styleTitle>
# dotnet_naming_rule.<namingRuleTitle>.severity = none | suggestion | warning | error

# private_async_rule
dotnet_naming_rule.private_async_rule.symbols                          = private_async_symbols
dotnet_naming_symbols.private_async_symbols.applicable_kinds           = method, local_function
dotnet_naming_symbols.private_async_symbols.applicable_accessibilities = private, local
dotnet_naming_symbols.private_async_symbols.required_modifiers         = async
dotnet_naming_rule.private_async_rule.style                            = async_camel_case_style
dotnet_naming_style.async_camel_case_style.capitalization              = camel_case
dotnet_naming_style.async_camel_case_style.required_suffix             = Async
dotnet_naming_rule.private_async_rule.severity                         = suggestion

# private_rule
dotnet_naming_rule.private_rule.symbols                          = private_symbols
dotnet_naming_symbols.private_symbols.applicable_kinds           = field
dotnet_naming_symbols.private_symbols.applicable_accessibilities = private
dotnet_naming_rule.private_rule.style                            = underscore_camel_case_style
dotnet_naming_rule.private_rule.severity                         = suggestion

# camel_case_rule
dotnet_naming_rule.camel_case_rule.symbols                = camel_case_symbols
dotnet_naming_symbols.camel_case_symbols.applicable_kinds = parameter, local, local_function
dotnet_naming_rule.camel_case_rule.style                  = camel_case_style
dotnet_naming_rule.camel_case_rule.severity               = suggestion

# async_rule
dotnet_naming_rule.async_rule.symbols                       = async_symbols
dotnet_naming_symbols.async_symbols.applicable_kinds        = method
dotnet_naming_symbols.async_symbols.required_modifiers      = async
dotnet_naming_rule.async_rule.style                         = async_pascal_case_style
dotnet_naming_style.async_pascal_case_style.capitalization  = pascal_case
dotnet_naming_style.async_pascal_case_style.required_suffix = Async
dotnet_naming_rule.async_rule.severity                      = suggestion

# pascal_case_rule
dotnet_naming_rule.pascal_case_rule.symbols  = pascal_case_symbols
dotnet_naming_rule.pascal_case_rule.style    = pascal_case_style
dotnet_naming_rule.pascal_case_rule.severity = suggestion

# Style
# dotnet_naming_style.<styleTitle>.capitalization = pascal_case | camel_case | first_word_upper | all_upper | all_lower
# dotnet_naming_style.<styleTitle>.required_prefix = <prefix>
# dotnet_naming_style.<styleTitle>.required_suffix = <suffix>
# dotnet_naming_style.<styleTitle>.word_separator = <separator character>

# PascalCaseStyle
dotnet_naming_style.pascal_case_style.capitalization = pascal_case

# Snake_Pascal_Case_Style
dotnet_naming_style.snake_pascal_case_style.capitalization = pascal_case
dotnet_naming_style.snake_pascal_case_style.word_separator = _

# camelCaseStyle
dotnet_naming_style.camel_case_style.capitalization = camel_case

# _camelCaseStyle
dotnet_naming_style.underscore_camel_case_style.capitalization = camel_case
dotnet_naming_style.underscore_camel_case_style.required_prefix = _

# snake_Camel_Case_Style
dotnet_naming_style.snake_camel_case_style.capitalization = camel_case
dotnet_naming_style.snake_camel_case_style.word_separator = _

# Firstwordupperstyle
dotnet_naming_style.first_word_upper_style.capitalization = first_word_upper

# Snake_first_word_upper_style
dotnet_naming_style.snake_first_word_upper_style.capitalization = first_word_upper
dotnet_naming_style.snake_first_word_upper_style.word_separator = _

# ALLUPPERSTYLE
dotnet_naming_style.all_upper_style.capitalization = all_upper

# SNAKE_ALL_UPPER_STYLE
dotnet_naming_style.snake_all_upper_style.capitalization = all_upper
dotnet_naming_style.snake_all_upper_style.word_separator = _

# alllowerstyle
dotnet_naming_style.all_lower_style.capitalization = all_lower

# snake_all_lower_style
dotnet_naming_style.snake_all_lower_style.capitalization = all_lower
dotnet_naming_style.snake_all_lower_style.word_separator = _
